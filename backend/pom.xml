<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>backity</artifactId>
        <groupId>dev.codesoapbox</groupId>
        <version>${revision}</version>
    </parent>
    <artifactId>backend</artifactId>
    <name>backend</name>
    <description>The backend module built with Spring Boot</description>

    <properties>
        <!--
        Warning: SpringDoc 2.8.0 breaks generics!
        E.g., now Page<X> and Page<Y> will become PageX and PageY.
        In 2.8.0, they will become a single Page, with X as the expected content.
        -->
        <springdoc.version>2.8.9</springdoc.version>
        <openapi-generator.version>7.13.0</openapi-generator.version>
        <maven-clean.version>3.5.0</maven-clean.version>
        <angular-openapi.version>19.0.0</angular-openapi.version>
        <jacoco.version>0.8.13</jacoco.version>
        <mapstruct.version>1.6.3</mapstruct.version>
        <lombok-mapstruct-binding.version>0.2.0</lombok-mapstruct-binding.version>
        <testcontainers.version>1.21.2</testcontainers.version>
        <archunit.version>1.4.1</archunit.version>

        <sonar.projectKey>backity-backend</sonar.projectKey>
        <sonar.projectName>Backity (backend)</sonar.projectName>
        <sonar.coverage.exclusions>**/BackityApplication.java,**/**Config.java</sonar.coverage.exclusions>
    </properties>

    <scm>
        <!-- Make sure this points to the correct repository -->
        <url>https://github.com/daniel-frak/backity</url>
        <connection>scm:git:https://github.com/daniel-frak/backity</connection>
    </scm>

    <dependencies>
        <dependency>
            <groupId>dev.codesoapbox</groupId>
            <artifactId>frontend</artifactId>
            <version>${revision}</version>
            <scope>runtime</scope>
        </dependency>

        <!-- Spring Boot Misc. -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <!-- END of Spring Boot Misc. -->

        <!-- Testing -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.projectreactor</groupId>
            <artifactId>reactor-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.awaitility</groupId>
            <artifactId>awaitility</artifactId>
            <version>4.3.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
            <version>${testcontainers.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${testcontainers.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>postgresql</artifactId>
            <version>${testcontainers.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.wiremock</groupId>
            <artifactId>wiremock-jetty12</artifactId>
            <version>3.13.1</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.tngtech.archunit</groupId>
            <artifactId>archunit</artifactId>
            <version>${archunit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.tngtech.archunit</groupId>
            <artifactId>archunit-junit5</artifactId>
            <version>${archunit.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- END of Testing -->

        <!-- Persistence -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>
        <dependency>
            <groupId>org.liquibase</groupId>
            <artifactId>liquibase-core</artifactId>
        </dependency>
        <!-- END of Persistence -->

        <!-- S3 -->
        <dependency>
            <groupId>io.awspring.cloud</groupId>
            <artifactId>spring-cloud-aws-starter-s3</artifactId>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>localstack</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- END of AWS -->

        <!-- Documentation -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-common</artifactId>
            <version>${springdoc.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>${springdoc.version}</version>
        </dependency>
        <!-- END of Documentation -->

        <!-- Websockets -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-websocket</artifactId>
        </dependency>
        <!-- END of Websockets -->

        <!-- Reflective access -->
        <dependency>
            <groupId>org.reflections</groupId>
            <artifactId>reflections</artifactId>
            <version>0.10.2</version>
        </dependency>
        <!-- Reflective access -->

        <!-- Utilities -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${mapstruct.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <!-- END of Utilities -->
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <!-- S3 -->
            <dependency>
                <groupId>io.awspring.cloud</groupId>
                <artifactId>spring-cloud-aws-dependencies</artifactId>
                <version>3.4.0</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.testcontainers</groupId>
                <artifactId>localstack</artifactId>
                <version>${testcontainers.version}</version>
                <scope>test</scope>
            </dependency>
            <!-- END of S3 -->
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <skip>false</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.14.0</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-configuration-processor</artifactId>
                        </path>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${mapstruct.version}</version>
                        </path>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok-mapstruct-binding</artifactId>
                            <version>${lombok-mapstruct-binding.version}</version>
                        </path>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${mapstruct.version}</version>
                        </path>
                        <!-- other annotation processors -->
                    </annotationProcessorPaths>
                    <compilerArgs>
                        <compilerArg>
                            -Amapstruct.unmappedSourcePolicy=ERROR
                        </compilerArg>
                        <compilerArg>
                            -Amapstruct.unmappedTargetPolicy=ERROR
                        </compilerArg>
                    </compilerArgs>
                </configuration>
            </plugin>

            <!-- Test configuration -->
            <plugin>
                <!-- Unit tests -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <properties>
                        <configurationParameters>
                            <!-- Enable parallel test execution: -->
                            junit.jupiter.execution.parallel.enabled=true

                            <!-- Execute tests within class in parallel: -->
                            junit.jupiter.execution.parallel.mode.default=concurrent

                            <!-- Execute test classes in parallel: -->
                            junit.jupiter.execution.parallel.mode.classes.default=concurrent

                            <!-- Compute desired parallelism based on number of available processors/cores: -->
                            junit.jupiter.execution.parallel.config.strategy=dynamic

                            <!-- Desired parallelism is multiplied by this value: -->
                            junit.jupiter.execution.parallel.config.dynamic.factor=1
                        </configurationParameters>
                    </properties>
                </configuration>
            </plugin>
            <plugin>
                <!-- Integration tests -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <configuration>
                    <!--
                    Fool Sonar to show both unit and integration tests together by instructing Failsafe to store its
                    test reports in the same directory as Surefire instead of the default failsafe-reports. See:
                    https://theholyjava.wordpress.com/2012/02/05/separating-integration-and-unit-tests-with-maven-sonar-failsafe-and-jacoco/
                    -->
                    <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
                    <properties>
                        <configurationParameters>
                            <!--
                            There are many ways to configure parallelism.
                            We must think about how we want our integration tests to work, especially in terms of
                            TestContainers:
                            - We could run all tests sequentially (no parallelism) and share containers between
                              test classes
                            - We could run only methods within test classes sequentially, but test classes in parallel,
                              sharing containers only within a test class
                            -->
                            <!-- Enable parallel test execution: -->
                            <!-- junit.jupiter.execution.parallel.enabled=true-->

                            <!-- Execute tests within class in sequence: -->
                            <!-- junit.jupiter.execution.parallel.mode.default=same_thread-->

                            <!-- Execute test classes in parallel: -->
                            <!-- junit.jupiter.execution.parallel.mode.classes.default=concurrent-->

                            <!-- Compute desired parallelism based on number of available processors/cores: -->
                            <!-- junit.jupiter.execution.parallel.config.strategy=fixed-->

                            <!-- Desired parallelism: -->
                            <!-- junit.jupiter.execution.parallel.config.fixed.parallelism=1-->
                        </configurationParameters>
                    </properties>
                </configuration>
            </plugin>
            <!-- END of Test configuration -->

            <!-- Sonarqube code coverage -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>report</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- END of Sonarqube code coverage -->

            <!-- Pitest mutation testing (general configuration) -->
            <plugin>
                <groupId>org.pitest</groupId>
                <artifactId>pitest-maven</artifactId>
                <version>1.20.0</version>
                <dependencies>
                    <dependency>
                        <groupId>org.pitest</groupId>
                        <artifactId>pitest-junit5-plugin</artifactId>
                        <version>1.2.3</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <timestampedReports>false</timestampedReports>
                    <mutators>STRONGER</mutators>
                    <threads>4</threads>
                    <withHistory>true</withHistory>
                    <excludedClasses>
                        <!--
                        MapStruct may generate untestable paths such as null-checks for non-nullable fields like IDs
                        -->
                        <excludedClass>*MapperImpl</excludedClass>

                        <!--
                        Configuration classes are tested implicitly during integration tests using Spring context
                         -->
                        <excludedClass>**.config.**</excludedClass>

                        <!-- The classes below are tested using integration tests -->
                        <excludedClass>**.adapters.driving.**.http.**.*Controller</excludedClass>
                        <excludedClass>**jpa.**.*Repository</excludedClass>
                        <excludedClass>*StartupListener</excludedClass>
                        <excludedClass>*SpringScheduler</excludedClass>
                        <excludedClass>*WebSocketHandler</excludedClass>
                        <excludedClass>*WebSocketPublisher</excludedClass>
                        <excludedClass>*WebSocketEventPublisher</excludedClass>
                        <excludedClass>*LogbackLogService</excludedClass>
                        <excludedClass>*StorageSolution</excludedClass>
                        <excludedClass>*GogEmbedWebClient</excludedClass>
                        <excludedClass>*GogAuthClient</excludedClass>
                    </excludedClasses>
                    <excludedTestClasses>
                        <!-- Integration tests are too costly for mutation testing -->
                        <param>*IntegrationTest</param>
                        <param>*IT</param>
                    </excludedTestClasses>
                    <outputFormats>
                        <!-- HTML format is convenient for human verification -->
                        <outputFormat>html</outputFormat>
                        <!-- XML format is required for the SonarQube plugin -->
                        <outputFormat>xml</outputFormat>
                    </outputFormats>
                </configuration>
            </plugin>
            <!-- END of Pitest mutation testing (general configuration) -->
        </plugins>
    </build>

    <profiles>
        <profile>
            <!-- Generates client code for the frontend -->
            <id>angular-client-code-gen</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>reserve-tomcat-port</id>
                                <goals>
                                    <goal>reserve-network-port</goal>
                                </goals>
                                <phase>process-resources</phase>
                                <configuration>
                                    <portNames>
                                        <portName>tomcat.http.port</portName>
                                    </portNames>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>pre-integration-test</id>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>post-integration-test</id>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <profiles>
                                <profile>angular-client-code-gen</profile>
                            </profiles>
                            <arguments>
                                <argument>--server.port=${tomcat.http.port}</argument>
                            </arguments>
                        </configuration>
                    </plugin>
                    <plugin>
                        <!--https://maven.apache.org/plugins/maven-clean-plugin/examples/delete_additional_files.html-->
                        <artifactId>maven-clean-plugin</artifactId>
                        <version>${maven-clean.version}</version>
                        <configuration>
                            <filesets>
                                <fileset>
                                    <directory>../frontend/src/main/angular/src/backend</directory>
                                    <followSymlinks>false</followSymlinks>
                                </fileset>
                            </filesets>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.openapitools</groupId>
                        <artifactId>openapi-generator-maven-plugin</artifactId>
                        <version>${openapi-generator.version}</version>
                        <executions>
                            <execution>
                                <id>angular-client-code-generation</id>
                                <phase>integration-test</phase>
                                <goals>
                                    <goal>generate</goal>
                                </goals>
                                <configuration>
                                    <inputSpec>http://localhost:${tomcat.http.port}/v3/api-docs</inputSpec>
                                    <output>${project.build.directory}/../../frontend/src/main/angular/src/backend
                                    </output>
                                    <generatorName>typescript-angular</generatorName>
                                    <!--
                                        Use this option to dump the configuration help for the specified generator
                                        instead of generating sources:
                                        <configHelp>true</configHelp>
                                    -->
                                    <configOptions>
                                        <!--
                                            Put generator-specific parameters here, e.g. for typescript-angular:
                                            <apiModulePrefix>Backend</apiModulePrefix>

                                            See more:
                                            https://openapi-generator.tech/docs/generators/typescript-angular/
                                         -->
                                        <ngVersion>${angular-openapi.version}</ngVersion>
                                        <serviceSuffix>Client</serviceSuffix>
                                    </configOptions>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- END of Client code generation -->

        <!-- Pitest mutation testing (profiles) -->
        <profile>
            <!-- Generates full Pitest reports -->
            <id>pitest-full</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.pitest</groupId>
                        <artifactId>pitest-maven</artifactId>
                        <executions>
                            <execution>
                                <id>pitest</id>
                                <phase>test-compile</phase>
                                <goals>
                                    <goal>mutationCoverage</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!-- Generates Pitest reports for new code -->
            <id>pitest-new-code</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.github.git-commit-id</groupId>
                        <artifactId>git-commit-id-maven-plugin</artifactId>
                        <version>9.0.2</version>
                    </plugin>
                    <plugin>
                        <groupId>org.pitest</groupId>
                        <artifactId>pitest-maven</artifactId>
                        <executions>
                            <execution>
                                <id>pitest</id>
                                <phase>test-compile</phase>
                                <goals>
                                    <goal>mutationCoverage</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <!-- originBranch will be provided by git-commit-id-maven-plugin -->
                            <originBranch>${git.branch}</originBranch>
                            <!-- Make sure destinationBranch points to your primary branch! -->
                            <destinationBranch>origin/main</destinationBranch>
                            <include>ADDED,MODIFIED</include>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!-- Additional Pitest configuration for Pull Requests -->
            <id>pitest-strict</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.pitest</groupId>
                        <artifactId>pitest-maven</artifactId>
                        <executions>
                            <execution>
                                <id>pitest</id>
                                <phase>test-compile</phase>
                                <goals>
                                    <goal>mutationCoverage</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <testStrengthThreshold>100</testStrengthThreshold>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- END of Pitest mutation testing (profiles) -->
    </profiles>

    <reporting>
        <plugins>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.version}</version>
            </plugin>
        </plugins>
    </reporting>
</project>
